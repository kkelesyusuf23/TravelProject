@using Newtonsoft.Json
@model List<CityTravelProject.EntityLayer.Concrete.Location>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_UILayout.cshtml";
    var locationsJson = JsonConvert.SerializeObject(Model);
}

<section class="w3l-inner-banner-main">
    <div class="about-inner about editContent">
        <div class="container">
            <div class="breadcrumbs-sub">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="index.html" class="editContent">Home <span class="fa fa-angle-right" aria-hidden="true"></span></a></li>
                    <li class="active editContent">Rotation</li>
                </ul>
            </div>
        </div>
    </div>
</section>

<section class="w3l-content-with-photo-4" id="about" style="margin:4% 1% 4% 1%">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8 pr-md-4">
                <div id="map" style="height: 60vh;"></div>
            </div>
            <div class="col-md-4 d-flex flex-column justify-content-between align-items-center pl-md-4 right-column" style="height: 60vh; background-color: #f7f7f7; border-radius:1%;border: 1px solid #ece4ec;">
                <div class="scrollbar" style="position: relative; width: 100%; height: 100%; overflow: auto;">
                    <div id="selectedAddresses" class="mb-3" style="position: relative; z-index: 1;">
                        <!-- Seçilen adreslerin listesi buraya gelecek -->
                    </div>
                    <i id="centerIcon" class="fa fa-road" style="font-size: 5em; color: #ccc; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 0;"></i>
                </div>
                <div class="mb-3">
                    <button class="btn btn-outline-success" id="saveRoute"><i class="fa-solid fa-download fa-2x"></i></button>
                    <button class="btn btn-outline-primary" id="drawRoute"><i class="fa-solid fa-route fa-2x"></i></button>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    async function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 39.0, lng: 35.0 },
            zoom: 6
        });

        var allowedBounds = new google.maps.LatLngBounds(
            new google.maps.LatLng(36.0, 26.0),
            new google.maps.LatLng(42.0, 45.0)
        );

        var lastValidCenter = map.getCenter();

        google.maps.event.addListener(map, 'center_changed', function () {
            if (allowedBounds.contains(map.getCenter())) {
                lastValidCenter = map.getCenter();
                return;
            }
            map.panTo(lastValidCenter);
        });

        var markers = [];
        var routeCoordinates = [];

        // Predefined locations
        var locations = @Html.Raw(locationsJson);

        locations.forEach(function (location) {
            var marker = new google.maps.Marker({
                position: { lat: location.Latitude, lng: location.Longitude },
                map: map,
                title: location.Name
            });

            marker.addListener('click', function () {
                addLocationToList(location, marker);
            });
        });

        // Kullanıcının haritaya tıklayarak konum seçmesi
        map.addListener('click', function (event) {
            if (!allowedBounds.contains(event.latLng)) {
                alert("Lütfen izin verilen bölge içinde bir konum seçin.");
                return;
            }

            var latitude = event.latLng.lat();
            var longitude = event.latLng.lng();
            var marker = new google.maps.Marker({
                position: { lat: latitude, lng: longitude },
                map: map
            });

            var location = {
                Name: "Custom Location",
                Description: "",
                Latitude: latitude,
                Longitude: longitude
            };

            addLocationToList(location, marker);
        });

        // Rotayı çiz
        document.getElementById('drawRoute').addEventListener('click', function () {
            if (routeCoordinates.length > 1) {
                var start = routeCoordinates[0];
                var end = routeCoordinates[routeCoordinates.length - 1];
                var waypoints = routeCoordinates.slice(1, routeCoordinates.length - 1).map(coord => `${coord.Latitude},${coord.Longitude}`).join('|');

                var url = `https://www.google.com/maps/dir/?api=1&origin=${start.Latitude},${start.Longitude}&destination=${end.Latitude},${end.Longitude}&waypoints=${waypoints}&travelmode=driving`;
                window.open(url, '_blank');
            } else {
                alert("Lütfen en az iki nokta seçin.");
            }
        });

        // Save route
        document.getElementById('saveRoute').addEventListener('click', async function () {
            if (routeCoordinates.length > 1) {
                var response = await fetch('Url.Action("SaveRoute", "UIRotation")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(routeCoordinates)
                });

                if (response.ok) {
                    alert("Route saved successfully.");
                } else {
                    var errorText = await response.text();
                    alert("Failed to save route: " + errorText);
                }
            } else {
                alert("Lütfen en az iki nokta seçin.");
            }
        });

        function addLocationToList(location, marker) {
            var selectedAddresses = document.getElementById('selectedAddresses');
            var existingItems = Array.from(selectedAddresses.children);
            var existingItem = existingItems.find(item =>
                item.dataset.latitude == location.Latitude &&
                item.dataset.longitude == location.Longitude
            );

            if (existingItem) {
                // Remove the existing item
                existingItem.remove();
            }

            // Create the new list item
            var addressItem = document.createElement('div');
            addressItem.className = "address-item";
            addressItem.dataset.latitude = location.Latitude;
            addressItem.dataset.longitude = location.Longitude;
            addressItem.innerHTML = `
                    Name: ${location.Name}, Description: ${location.Description}, Lat: ${location.Latitude}, Lng: ${location.Longitude}
                    <button class="btn btn-sm btn-danger remove-btn">Remove</button>
                `;
            selectedAddresses.appendChild(addressItem);

            var removeButton = addressItem.querySelector('.remove-btn');
            removeButton.addEventListener('click', function () {
                addressItem.remove();
                marker.setMap(null);
                var index = routeCoordinates.findIndex(coord => coord.Latitude === location.Latitude && coord.Longitude === location.Longitude);
                if (index > -1) {
                    routeCoordinates.splice(index, 1);
                }
            });

            // Update routeCoordinates
            var index = routeCoordinates.findIndex(coord => coord.Latitude === location.Latitude && coord.Longitude === location.Longitude);
            if (index > -1) {
                routeCoordinates.splice(index, 1);
            }
            routeCoordinates.push(location);

            // Add marker to markers array if it's not already there
            if (!markers.includes(marker)) {
                markers.push(marker);
            }
        }

    }

    initMap();
</script>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDZpnj0Vt7cFAHZtUAQnpPCoqz6J5eokM8&callback=initMap"></script>
