@using Newtonsoft.Json
@model List<CityTravelProject.EntityLayer.Concrete.Location>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_UILayout.cshtml";
    var locationsJson = JsonConvert.SerializeObject(Model);
}

<link rel="stylesheet" href="sweetalert2.min.css">

<section class="w3l-inner-banner-main">
    <div class="about-inner about editContent">
        <div class="container">
            <div class="breadcrumbs-sub">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="index.html" class="editContent">Home <span class="fa fa-angle-right" aria-hidden="true"></span></a></li>
                    <li class="active editContent">Rotation</li>
                </ul>
            </div>
        </div>
    </div>
</section>

<section class="w3l-content-with-photo-4" id="about" style="margin:4% 1% 4% 1%">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8 pr-md-4">
                <div id="map" style="height: 60vh;"></div>
            </div>
            <div class="col-md-4 d-flex flex-column justify-content-between align-items-center pl-md-4 right-column" style="height: 60vh; background-color: #f7f7f7; border-radius:1%;border: 1px solid #ece4ec;">
                <div class="scrollbar" style="position: relative; width: 100%; height: 100%; overflow: auto;">
                    <div id="selectedAddresses" class="mb-3" style="position: relative; z-index: 1;">
                        <!-- Selected addresses list will be appended here -->
                    </div>
                    <i id="centerIcon" class="fa fa-road" style="font-size: 5em; color: #ccc; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 0;"></i>
                </div>
                <div class="mb-3">
                    <button class="btn btn-outline-success" id="saveRoute"><i class="fa-solid fa-download fa-2x"></i></button>
                    <button class="btn btn-outline-primary" id="drawRoute"><i class="fa-solid fa-route fa-2x"></i></button>
                </div>
            </div>
        </div>
    </div>
</section>
<script>
    async function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 39.0, lng: 35.0 },
            zoom: 6
        });

        var allowedBounds = new google.maps.LatLngBounds(
            new google.maps.LatLng(36.0, 26.0),
            new google.maps.LatLng(42.0, 45.0)
        );

        var lastValidCenter = map.getCenter();

        google.maps.event.addListener(map, 'center_changed', function () {
            if (allowedBounds.contains(map.getCenter())) {
                lastValidCenter = map.getCenter();
                return;
            }
            map.panTo(lastValidCenter);
        });

        var markers = [];
        var routeCoordinates = [];

        // Polyline options
        var polylineOptions = {
            path: [],
            strokeColor: '#D2B48C', // Açık kahverengi
            strokeOpacity: 1.0,
            strokeWeight: 3
        };
        var polyline = new google.maps.Polyline(polylineOptions);
        polyline.setMap(map);

        // Predefined locations
        var locations = @Html.Raw(locationsJson);

        var customIcon = {
            url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png" // Mavi işaretleyici URL'si
        };

        var circleIcon = {
            path: google.maps.SymbolPath.CIRCLE,
            scale: 5,
            fillColor: "#FFF", // Sarı renk
            fillOpacity: 1,
            strokeWeight: 1
        };

        var redIcon = {
            url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png" // Kırmızı işaretleyici URL'si
        };

        locations.forEach(function (location) {
            var marker = new google.maps.Marker({
                position: { lat: location.Latitude, lng: location.Longitude },
                map: map,
                title: location.Name,
                icon: customIcon
            });

            marker.addListener('click', function () {
                addLocationToList(location, marker);
            });

            markers.push(marker);
        });

        // User clicks on the map to select a location
        map.addListener('click', function (event) {
            if (!allowedBounds.contains(event.latLng)) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Uyarı!',
                    text: 'Lütfen izin verilen sınırlar içinde bir konum seçin.',
                    confirmButtonText: 'Tamam'
                });
                return;
            }

            var latitude = event.latLng.lat();
            var longitude = event.latLng.lng();
            var marker = new google.maps.Marker({
                position: { lat: latitude, lng: longitude },
                map: map,
                icon: circleIcon // Kullanıcı seçimi için küçük sarı işaretleyici
            });

            var location = {
                Name: "Custom Location",
                Description: "",
                Latitude: latitude,
                Longitude: longitude
            };

            addLocationToList(location, marker);
        });

        // Draw route
        document.getElementById('drawRoute').addEventListener('click', function () {
            if (routeCoordinates.length > 1) {
                var start = routeCoordinates[0];
                var end = routeCoordinates[routeCoordinates.length - 1];
                var waypoints = routeCoordinates.slice(1, routeCoordinates.length - 1).map(coord => `${coord.Latitude},${coord.Longitude}`).join('|');

                var url = `https://www.google.com/maps/dir/?api=1&origin=${start.Latitude},${start.Longitude}&destination=${end.Latitude},${end.Longitude}&waypoints=${waypoints}&travelmode=driving`;
                window.open(url, '_blank');
            } else {
                Swal.fire({
                    icon: 'warning',
                    title: 'Uyarı!',
                    text: 'Lütfen en az iki nokta seçin.',
                    confirmButtonText: 'Tamam'
                });
            }
        });

        // Save route
        document.getElementById('saveRoute').addEventListener('click', async function () {
            if (routeCoordinates.length > 1) {
                try {
                    var response = await fetch('/UIRotation/SaveRoute', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(routeCoordinates)
                    });

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Başarılı!',
                            text: 'Rotanız başarıyla kaydedildi.',
                            confirmButtonText: 'Tamam'
                        }).then(() => {
                            location.reload(); // Sayfayı yenile
                        });
                    } else {
                        var errorText = await response.text();
                        Swal.fire({
                            icon: 'error',
                            title: 'Hata!',
                            text: 'Rotanız kaydedilirken bir hata oluştu: ' + errorText,
                            confirmButtonText: 'Tamam'
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Hata!',
                        text: 'Bir hata oluştu, konsolu kontrol edin.',
                        confirmButtonText: 'Tamam'
                    });
                }
            } else {
                Swal.fire({
                    icon: 'warning',
                    title: 'Uyarı!',
                    text: 'Lütfen en az iki nokta seçin.',
                    confirmButtonText: 'Tamam'
                });
            }
        });

        function addLocationToList(location, marker) {
            var selectedAddresses = document.getElementById('selectedAddresses');
            var existingItems = Array.from(selectedAddresses.children);
            var existingItem = existingItems.find(item =>
                item.dataset.latitude == location.Latitude &&
                item.dataset.longitude == location.Longitude
            );

            if (existingItem) {
                // Remove the existing item
                existingItem.remove();
            }

            // Create the new list item
            var addressItem = document.createElement('div');
            addressItem.className = "address-item";
            addressItem.dataset.latitude = location.Latitude;
            addressItem.dataset.longitude = location.Longitude;
            addressItem.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="margin-left:10px"><b>${location.Name}</b>, Enlem: ${location.Latitude}, Boylam: ${location.Longitude}</div>
                <div><button class="btn btn-sm btn-danger remove-btn">Remove</button></div>
            </div>
        `;

            selectedAddresses.appendChild(addressItem);

            var removeButton = addressItem.querySelector('.remove-btn');
            removeButton.addEventListener('click', function () {
                addressItem.remove();
                var index = routeCoordinates.findIndex(coord => coord.Latitude === location.Latitude && coord.Longitude === location.Longitude);
                if (index > -1) {
                    routeCoordinates.splice(index, 1);
                }
                marker.setIcon(customIcon); // Mavi işaretleyiciye dönüştür
                updateMarkers();
                updatePolyline();
            });

            // Update routeCoordinates
            var index = routeCoordinates.findIndex(coord => coord.Latitude === location.Latitude && coord.Longitude === location.Longitude);
            if (index > -1) {
                routeCoordinates.splice(index, 1);
            }
            routeCoordinates.push(location);

            // Update marker icons and polyline
            updateMarkers();
            updatePolyline();
        }

        function updateMarkers() {
            // First reset all markers to blue
            markers.forEach(marker => {
                marker.setIcon(customIcon);
            });

            // Set all selected locations to small yellow circle icon
            routeCoordinates.forEach((location, index) => {
                var marker = markers.find(marker => marker.getPosition().lat() === location.Latitude && marker.getPosition().lng() === location.Longitude);
                if (marker) {
                    marker.setIcon(circleIcon);
                }
            });

            // Set the last selected location to red icon
            if (routeCoordinates.length > 0) {
                var lastLocation = routeCoordinates[routeCoordinates.length - 1];
                var lastMarker = markers.find(marker => marker.getPosition().lat() === lastLocation.Latitude && marker.getPosition().lng() === lastLocation.Longitude);
                if (lastMarker) {
                    lastMarker.setIcon(redIcon);
                }
            }
        }

        function updatePolyline() {
            var path = routeCoordinates.map(coord => new google.maps.LatLng(coord.Latitude, coord.Longitude));
            polyline.setPath(path);
        }
    }

    initMap();


</script>
<script src="sweetalert2.min.js"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDZpnj0Vt7cFAHZtUAQnpPCoqz6J5eokM8&callback=initMap"></script>
<!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.min.css">

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.min.js"></script>
